/* usersComponent's private CSS styles */
.users {
    margin: 0 0 2em 0;
    list-style-type: none;
    padding: 0;
    width: 15em;
  }
  
  .users li {
    display: flex;
  }
  
  .users button {
    flex: 1;
    cursor: pointer;
    position: relative;
    left: 0;
    background-color: #EEE;
    margin: .5em;
    padding: 0;
    border-radius: 4px;
    display: flex;
    align-items: stretch;
    height: 1.8em;
  }
  
  .users button:hover {
    color: #2c3a41;
    background-color: #e6e6e6;
    left: .1em;
  }
  
  .users button:active {
    background-color: #525252;
    color: #fafafa;
  }
  
  .users button.selected {
    background-color: black;
    color: white;
  }
  
  .users button.selected:hover {
    background-color: #505050;
    color: white;
  }
  
  .users button.selected:active {
    background-color: black;
    color: white;
  }
  
  .users .badge {
    display: inline-block;
    font-size: small;
    color: white;
    padding: 0.8em 0.7em 0 0.7em;
    background-color: #405061;
    line-height: 1em;
    margin-right: .8em;
    border-radius: 4px 0 0 4px;
  }
  
  .users .name {
    align-self: center;
  }

  .example-container {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
  
  .example-is-mobile .example-toolbar {
    position: fixed;
    /* Make sure the toolbar will stay on top of the content as it scrolls past. */
    z-index: 2;
  }
  
  h1.example-app-name {
    margin-left: 8px;
  }
  
  .example-sidenav-container {
    /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
       causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
    flex: 1;
  }
  
  .example-is-mobile .example-sidenav-container {
    /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
       `<body>` to be our scrolling element for mobile layouts. */
    flex: 1 0 auto;
  }
  